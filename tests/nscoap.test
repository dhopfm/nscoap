# -*- Tcl -*-
# vim: set ft=tcl:
#
# The contents of this file are subject to the Mozilla Public License
# Version 1.1 (the "License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://mozilla.org/
#
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See
# the License for the specific language governing rights and limitations
# under the License.
#
# Copyright 2006 (C) Stephen Deasey <sdeasey@gmail.com>
# Copyright 2015 (C) Gustaf Neumann <neumann@wu-wien.ac.at>
#
# Alternatively, the contents of this file may be used under the terms
# of the GNU General Public License (the "GPL"), in which case the
# provisions of GPL are applicable instead of those above.  If you wish
# to allow use of your version of this file only under the terms of the
# GPL and not to allow others to use your version of this file under the
# License, indicate your decision by deleting the provisions above and
# replace them with the notice and other provisions required by the GPL.
# If you do not delete the provisions above, a recipient may use your
# version of this file under either the License or the GPL.
#
#


#
# Test the nsssl module
#


package require tcltest 2.2
namespace import -force ::tcltest::*

::tcltest::configure {*}$argv

set port [ns_config ns/server/test/module/nscoap port]
set addr [ns_config ns/server/test/module/nscoap address]
if {$port ne ""} {
    testConstraint serverListen true
}

#
# Trivial test, if everything is loaded, and if ns_coap command is
# available. When the command changes, this reminds us un adding tests
# for the changed arguments.
#
test nscoap-1.0 {test syntax} -body {
    ns_coap
} -returnCodes error -result {wrong # args: should be "ns_coap ?-timeout timeout? ?-noreply? ?-retries retries? ?-stream stream? ?-bind bind? ?--? address port data"}

#
# Perform direct round-trip (no nsv-array, no mapping provided)
#
test nscoap-2.1 {direct request} -constraints {serverListen} -body {
    ns_coap $addr $port "@\x01*\x02"
} -match glob -result "*OK"

#
# Return value from nsv array for key "hello"
#
test nscoap-2.2 {short request 1.0} -constraints {serverListen} -setup {
    nsv_set nscoap hello 123
} -body {
    ns_coap $addr $port "@\x01*\x02\xb3nsv\x05hello"
} -cleanup {
    nsv_unset nscoap hello
} -match glob -result "*123"


#
# Perform HTTP mapping, the "URL" starts with a "/".
#
test nscoap-2.3 {short request 1.0} -constraints {serverListen} -setup {
    ns_register_proc GET /test {
        ns_return 200 text/plain "Hello World"
    }
} -body {
    ns_coap $addr $port "@\x01*\x02\xb5/test"
} -cleanup {
    ns_unregister_op GET /test
} -match glob -result "*Hello World"



cleanupTests
